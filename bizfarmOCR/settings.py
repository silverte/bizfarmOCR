"""
Django settings for bizfarmOCR project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#@jnfau#99zsougf%%rxcarktzr2o-8azx3338#+ec2b^uz@vf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # OCR console app: 템플릿 오버라이딩을 위해 allauth 보다 상위에 위치해야함
    'console',
    # User management by allauth
    'widget_tweaks',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # profile 입력을 위한 middleware 추가
    # 'console.middleware.EmailAuthMiddleware',
]

ROOT_URLCONF = 'bizfarmOCR.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'console/templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries':{
                'js': 'console.templatetags.js'
            }
        },
    },
]

WSGI_APPLICATION = 'bizfarmOCR.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 30,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
    # CustomValidator
    {
        "NAME": 'console.validators.CustomPasswordValidator',
    }
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
# LANGUAGE_CODE = 'ko'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'console/media')
MEDIA_URL = 'uploads/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Auth Settings

# User 모델 추가
AUTH_USER_MODEL = 'console.User'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# 회원가입 성공 시 리디렉트되는 URL
ACCOUNT_SIGNUP_REDIRECT_URL = 'index'
# 성공적인 로그인 시 리디렉트되는 URL
LOGIN_REDIRECT_URL = 'index'
# LoginRequiredMixin 로그인 URL 지정
LOGIN_URL = 'account_login'
# 로그아웃 클릭시 페이지 없이 바로 로그아웃 되도록 설정
ACCOUNT_LOGOUT_ON_GET = True
# email로 로그인을 하기위한 세팅
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
# 세션 유효기간(second)
SESSION_COOKIE_AGE = 3600
# nickname 추가한 SignupForm form을 사용하도록 설정
ACCOUNT_SIGNUP_FORM_CLASS = 'console.forms.SignupForm'
# 유효성 검사를 통과하지 못했을때 폼의 비밀번호 영역을 초기화 하지 않고 유지시킴
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = True
# Email 인증 설정 default: optional
ACCOUNT_EMAIL_VARIFICATION = 'optional'
# 이메일 인증 링크를 클릭하면 바로 인증됨
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# 이메일 인증완료 후 로그인 되어 있을 경우 보여줄 페이지
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'account_email_confirmation_done'
# 이메일 인증완료 후 로그인 안되어 있을 경우 보여줄 페이지
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'account_email_confirmation_done'
# 비밀번호 초기화 유효기간 설정 Default: 259200 (3 days, in seconds)
PASSWORD_RESET_TIMEOUT = 259200
# 이메일 발송시 웹사이트의 도메인 없애기
ACCOUNT_EMAIL_SUBJECT_PREFIX = ''

# Email settings
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = '309.garage@gmail.com'
EMAIL_HOST_PASSWORD = 'meplwxpkizwnitzz'